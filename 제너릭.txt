제너릭(generic) : 데이터타입의 일반화(generalize)를 의미

제너릭프로그래밍 : 어떤 값이 하나의 참조자료형이 아닌 여러 참조자료형을 사용할 수 있도록 프로그래밍하는 것
클래스나 메소드에서 사용하는 데이터타입을 미리 선언하지않고, 컴파일 시에 미리 지정하는 방법

	장점 1) 객체의 타입 안정성을 높임.
		2) 타입 변환 및 타입 검사에 재화를 줄임
	
[와일드카드(wild card)]
	: 이름에 제한을 두지 않음을 표현하는데 사용되는 기호?

문법
<?> : 타입에 모든 타입을 사용할 수 있음.
<? extends T> : T타입과 T타입을 상속받는 자손 클래스 타입만 사용가능
<? super T>	: T타입과 T타입이 상속받는 조상클래스 타입만 사용가능

컬렉션 프레임워크 : 데이터를 저장하는 자료구조와 데이터를 처리하는 알고리즘을 구조화하여 클래스로 구현해놓은 것
	- 자바가 구현하여 java.util패키지에서 제공
	
컬렉션 프레임워크의 전체구조
	1. Collection인터페이스 : 하나의 자료를 모아서 관리하는데 유용
		1)List인터페이스 : 순차적인 자료, 중복가능한 자료
			- 대표적인 클래스 : ArrayList, Vector, LinkedList
		2)Set인터페이스 : 순서상관없음, 중복불가능한 자료
	2. Map인터페이스 : 쌍으로 된 장료들을 관리하는데 유용함. 쌍(키와 키값으로 이루어짐)
		키(key) : 중복불가능함
		키값(value) : 중복가능하고, 여러개의 값을 가질 수 있다.